version: '3.8'

services:
  app:
    container_name: hackmate-app
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
        NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL:-/sign-in}
        NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL:-/sign-up}
        DATABASE_URL: postgresql://hackmate:hackmate_password@postgres:5432/hackmate?schema=public
        REDIS_URL: redis://redis:6379
        CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
        CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
        CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      network: host
    
    ports:
      - "3000:3000"
    
    environment:
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=${NEXT_PUBLIC_CLERK_SIGN_IN_URL}
      - NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL=${NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL}
      - NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL=${NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL}
      - DATABASE_URL=postgresql://hackmate:hackmate_password@postgres:5432/hackmate?schema=public
      - DIRECT_URL=postgresql://hackmate:hackmate_password@postgres:5432/hackmate?schema=public
      - REDIS_URL=redis://redis:6379
      - NEXT_PUBLIC_CLOUDINARY_API_KEY=${NEXT_PUBLIC_CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Connect to shared network
    networks:
      - hackmate-network
    
    # Restart policy: restart unless explicitly stopped
    restart: unless-stopped
    
    # Health check to monitor application status
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits (optional, uncomment for production)
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 1G
    #     reservations:
    #       cpus: '0.5'
    #       memory: 512M

  postgres:
    container_name: hackmate-postgres
    image: postgres:16-alpine
    
    ports:
      - "5432:5432"
    
    environment:
      - POSTGRES_USER=hackmate
      - POSTGRES_PASSWORD=hackmate_password
      - POSTGRES_DB=hackmate
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
    
    networks:
      - hackmate-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hackmate -d hackmate"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    container_name: hackmate-redis
    image: redis:7-alpine
    
    ports:
      # Expose Redis port for external access (optional)
      - "6379:6379"
    
    volumes:
      # Persist Redis data across container restarts
      - redis-data:/data
      # Optional: Custom Redis config
      # - ./redis.conf:/usr/local/etc/redis/redis.conf
    
    networks:
      - hackmate-network
    
    restart: unless-stopped
    
    # Redis command with persistence enabled
    # --appendonly yes: Enable AOF (Append Only File) for durability
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Health check for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    # Resource limits for Redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  hackmate-network:
    driver: bridge
